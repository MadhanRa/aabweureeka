// Activate autocomplete on all stock code inputs (initial and dynamically added)
    function activateAutocomplete() {
        $('input[name$="[kode]"]').each(function() {
            if (!$(this).hasClass('ui-autocomplete-input')) {
                const rowIndex = $(this).attr('name').match(/\d+/)[0];

                $(this).autocomplete({
                    source: function(request, response) {
                        $.get('<?= site_url('transaksi/pembelian/pembelian/lookup-stock') ?>', {
                            term: request.term
                        }, function(data) {
                            // Transform the data for display
                            const items = data.map(item => ({
                                label: `${item.kode} - ${item.nama_barang}`,
                                value: item.kode,
                                item: item
                            }));
                            response(items);
                        });
                    },
                    minLength: 2,
                    select: function(event, ui) {
                        // Fill the form fields with the selected item's data
                        $(`input[name="detail[${rowIndex}][id_stock]"]`).val(ui.item.item.id_stock);
                        $(`input[name="detail[${rowIndex}][kode]"]`).val(ui.item.item.kode);
                        $(`input[name="detail[${rowIndex}][nama_barang]"]`).val(ui.item.item.nama_barang);
                        $(`input[name="detail[${rowIndex}][satuan]"]`).val(
                            ui.item.item.satuan_1 + (ui.item.item.satuan_2 ? '/' + ui.item.item.satuan_2 : '')
                        );
                        $(`input[name="detail[${rowIndex}][harga_satuan]"]`).val(ui.item.item.harga_beli);

                        // Trigger change event to update calculations
                        $(`input[name="detail[${rowIndex}][harga_satuan]"]`).trigger('change');

                        return false; // Prevent default behavior
                    }
                }).autocomplete("instance")._renderItem = function(ul, item) {
                    const formattedPrice = new Intl.NumberFormat('id-ID', {
                        style: 'currency',
                        currency: 'IDR',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    }).format(item.item.harga_beli);
                    // Custom rendering of dropdown items
                    return $("<li>")
                        .append(`<div><strong>${item.item.kode}</strong> - ${item.item.nama_barang} <br>
                             <small>Satuan: ${item.item.satuan_1}/${item.item.satuan_2}, Harga: ${formattedPrice}</small></div>`)
                        .appendTo(ul);
                };
            }
        });
    }

    // Initial activation for existing fields
    $(document).ready(function() {
        activateAutocomplete();
    });

    let row = 1;
    $('#btnAddRow').click(function() {
        const tr = `<tr>
            <td>
                <input name="detail[${row}][id_stock]" hidden>
                <input name="detail[${row}][kode]" class="form-control form-control-sm">
            </td>
            <td><input name="detail[${row}][nama_barang]" class="form-control form-control-sm" readonly></td>
            <td><input name="detail[${row}][satuan]" class="form-control form-control-sm" readonly></td>
            <td><input name="detail[${row}][qty1]" class="form-control form-control-sm"></td>
            <td><input name="detail[${row}][qty2]" class="form-control form-control-sm"></td>
            <td><input name="detail[${row}][harga_satuan]" class="form-control form-control-sm" readonly></td>
            <td><input name="detail[${row}][jml_harga]" class="form-control form-control-sm" readonly></td>
            <td><input name="detail[${row}][disc_1_perc]" class="form-control form-control-sm"></td>
            <td><input name="detail[${row}][disc_1_rp]" class="form-control form-control-sm"></td>
            <td><input name="detail[${row}][disc_2_perc]" class="form-control form-control-sm"></td>
            <td><input name="detail[${row}][disc_2_rp]" class="form-control form-control-sm"></td>
            <td><input name="detail[${row}][total]" class="form-control form-control-sm" readonly></td>
            <td><button type="button" class="btn btn-danger btnRemove">X</button></td>
        </tr>`;
        $('#tabelDetail tbody').append(tr);
        row++;
        // Activate autocomplete for the new row
        activateAutocomplete();
    });

    $(document).on('click', '.btnRemove', function() {
        $(this).closest('tr').remove();
    });

    $('#formPembelian').submit(function(e) {
        e.preventDefault();
        $.ajax({
            url: '/pembelian/save',
            method: 'POST',
            data: $(this).serialize(),
            success: function(res) {
                alert('Data berhasil disimpan!');
                location.reload();
            }
        });
    });


    document.addEventListener('DOMContentLoaded', function() {
        // Get references to the date inputs
        const tanggalInput = document.querySelector('input[name="tanggal"]');
        const jatuhTempoInput = document.querySelector('input[name="tgl_jatuhtempo"]');
        const topInput = document.querySelector('input[name="TOP"]');

        // Calculate due date when date input changes
        tanggalInput.addEventListener('change', updateJatuhTempo);
        topInput.addEventListener('change', updateJatuhTempo);

        // Initial calculation if date is already set
        updateJatuhTempo();

        function updateJatuhTempo() {
            if (tanggalInput.value) {
                // Parse the input date
                const tanggal = new Date(tanggalInput.value);

                // Get TOP value (default to 0 if not a number)
                const topValue = parseInt(topInput.value) || 0;

                // Add TOP days to the date
                tanggal.setDate(tanggal.getDate() + topValue);

                // Format the date as YYYY-MM-DD for the input
                const year = tanggal.getFullYear();
                const month = String(tanggal.getMonth() + 1).padStart(2, '0');
                const day = String(tanggal.getDate()).padStart(2, '0');

                // Update the due date field
                jatuhTempoInput.value = `${year}-${month}-${day}`;
            }
        }
    });